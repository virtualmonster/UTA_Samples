/*
 * generated by Xtext 2.25.0
 */
package com.hcl.products.onetest.lang.script.formatting2;

import java.util.Iterator;

import org.eclipse.xtext.formatting2.AbstractJavaFormatter;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.xbase.XExpression;

import com.hcl.products.onetest.lang.script.script.Blobs;
import com.hcl.products.onetest.lang.script.script.Macro;
import com.hcl.products.onetest.lang.script.script.Model;
import com.hcl.products.onetest.lang.script.script.StringToMacroMapEntry;
import com.hcl.products.onetest.lang.script.script.StringToMessageMapEntry;
import com.hcl.products.onetest.lang.script.script.Values;

public class ScriptFormatter extends AbstractJavaFormatter {

	protected void format(Model model, IFormattableDocument doc) {
		// TODO: format HiddenRegions around keywords, attributes, cross references,
		// etc.
		for (XExpression xExpression : model.getHandlers()) {
			doc.format(xExpression);
		}
		for (XExpression stepExpression : model.getSteps().getExpressions()) {
			doc.format(stepExpression);
		}

		for (Values values : model.getValues()) {
			doc.format(values);

		}
		for (StringToMacroMapEntry stringToMacroMapEntry : model.getMacros()) {
			doc.format(stringToMacroMapEntry);

		}
		for (StringToMessageMapEntry stringToMessageMapEntry : model.getMessages()) {
			doc.format(stringToMessageMapEntry);

		}
		for (Blobs blobs : model.getBlobs()) {
			doc.format(blobs);
		}

	}

	protected void format(XExpression xExpression, IFormattableDocument doc) {
		doc.append(regionFor(xExpression).keyword("-"), this::oneSpace);
	}

	protected void format(StringToMessageMapEntry stringToMessageMapEntry, IFormattableDocument doc) {
		doc.append(regionFor(stringToMessageMapEntry).keyword(":"), this::newLine);
	}

	protected void format(Macro macro, IFormattableDocument doc) {
		doc.append(regionFor(macro.getSteps()).keyword(":"), this::newLine);
		for (XExpression stepExpression : macro.getSteps().getExpressions()) {
			doc.format(stepExpression);
		}
	}

}
